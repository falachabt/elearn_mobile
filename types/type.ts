/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgresql://username:password@aws-0-eu-central-1.pooler.supabase.com:5432/postgres -t accounts -t audit_logs -t cart_items -t carts -t challenges -t chat_rooms -t class_difficulty_credits -t class_levels -t concours -t concours_learningpaths -t content_interactions -t course_learningpath -t course_progress_summary -t course_tags -t course_videos -t courses -t courses_categories -t courses_content -t courses_content_replica -t courses_replica -t daily_challenges -t group_content -t groups -t learning_paths -t learning_sessions -t messages -t participants -t payment_status -t payments -t permissions -t quiz -t quiz_attempts -t quiz_courses -t quiz_learningpath -t quiz_pin -t quiz_question_template -t quiz_questions -t quiz_tags -t resource_permissions -t ressources -t rewards -t roles -t schools -t staff_invitations -t started_exams -t started_exams_questions -t streak_logs -t tags -t tags_content -t transactions -t user_activity -t user_answers -t user_challenges -t user_program_enrollments -t user_signup_status -t user_streaks -t user_xp -t usercourseprogress -t userquizprogress -t view -t xp_history -t year_programs -s public
 *
 */


export type Json = unknown;
export type image = 'id' | 'path' | 'uploadthing_id' | 'url';
export type learning_session_type = 'mobile' | 'web';
export type user_activity_status = 'active' | 'inactive';

// Table accounts
export interface Accounts {
  created_at: Date;
  firstname: string | null;
  lastname: string | null;
  email: string;
  type: string;
  genre: string | null;
  authId: string;
  defpass: string | null;
  image: Json | null;
  groups: string[] | null;
  id: string;
  phone: number | null;
  middlename: string | null;
  nationality: string | null;
  studentid: string | null;
  guardianname: string | null;
  guardianphone: string | null;
  guardianemail: string | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postalcode: string | null;
  country: string | null;
  coursesenrolled: string[] | null;
  coursescompleted: string[] | null;
  status: boolean | null;
  skills: string[] | null;
  gradelevel: string | null;
  gpa: number | null;
  major: string | null;
  minor: string | null;
  hobbies: string[] | null;
  achievements: string[] | null;
  clubs: string[] | null;
  birthdate: Date | null;
  class: string | null;
  school: string | null;
  schoollevel: string | null;
  favoritesubjects: string[] | null;
  hasrepeatedclass: boolean | null;
  repeatedclassdetails: string | null;
  maingoal: string | null;
  othergoals: string | null;
  learningstyle: string | null;
  motivation: string | null;
  internetaccess: boolean | null;
  preferredlanguage: string | null;
  accessibilityneeds: string | null;
  reminders: boolean | null;
  invitedfriends: string[] | null;
  remindertime: Date | null;
  onboarding_done: boolean | null;
  /** the active billing the user is pai for */
  active_trx: string | null;
  role_id: string | null;
}
export interface AccountsInput {
  created_at?: Date;
  firstname?: string | null;
  lastname?: string | null;
  email: string;
  type?: string;
  genre?: string | null;
  authId: string;
  defpass?: string | null;
  image?: Json | null;
  groups?: string[] | null;
  id?: string;
  phone?: number | null;
  middlename?: string | null;
  nationality?: string | null;
  studentid?: string | null;
  guardianname?: string | null;
  guardianphone?: string | null;
  guardianemail?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  postalcode?: string | null;
  country?: string | null;
  coursesenrolled?: string[] | null;
  coursescompleted?: string[] | null;
  status?: boolean | null;
  skills?: string[] | null;
  gradelevel?: string | null;
  gpa?: number | null;
  major?: string | null;
  minor?: string | null;
  hobbies?: string[] | null;
  achievements?: string[] | null;
  clubs?: string[] | null;
  birthdate?: Date | null;
  class?: string | null;
  school?: string | null;
  schoollevel?: string | null;
  favoritesubjects?: string[] | null;
  hasrepeatedclass?: boolean | null;
  repeatedclassdetails?: string | null;
  maingoal?: string | null;
  othergoals?: string | null;
  learningstyle?: string | null;
  motivation?: string | null;
  internetaccess?: boolean | null;
  preferredlanguage?: string | null;
  accessibilityneeds?: string | null;
  reminders?: boolean | null;
  invitedfriends?: string[] | null;
  remindertime?: Date | null;
  onboarding_done?: boolean | null;
  /** the active billing the user is pai for */
  active_trx?: string | null;
  role_id?: string | null;
}
const accounts = {
  tableName: 'accounts',
  columns: ['created_at', 'firstname', 'lastname', 'email', 'type', 'genre', 'authId', 'defpass', 'image', 'groups', 'id', 'phone', 'middlename', 'nationality', 'studentid', 'guardianname', 'guardianphone', 'guardianemail', 'address', 'city', 'state', 'postalcode', 'country', 'coursesenrolled', 'coursescompleted', 'status', 'skills', 'gradelevel', 'gpa', 'major', 'minor', 'hobbies', 'achievements', 'clubs', 'birthdate', 'class', 'school', 'schoollevel', 'favoritesubjects', 'hasrepeatedclass', 'repeatedclassdetails', 'maingoal', 'othergoals', 'learningstyle', 'motivation', 'internetaccess', 'preferredlanguage', 'accessibilityneeds', 'reminders', 'invitedfriends', 'remindertime', 'onboarding_done', 'active_trx', 'role_id'],
  requiredForInsert: ['email', 'authId'],
  primaryKey: 'id',
  foreignKeys: { class: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as Accounts,
  $input: null as unknown as AccountsInput
} as const;

// Table audit_logs
export interface AuditLogs {
  id: number;
  content_type: string;
  content_id: string;
  action: string;
  modified_at: Date;
  user_id: string | null;
  quiz_question_id: number | null;
  course_id: number | null;
  courses_content_id: number | null;
  /** to get the reference with the quiz id table */
  quiz_id: string | null;
  learning_path_id: string | null;
}
export interface AuditLogsInput {
  id: number;
  content_type: string;
  content_id: string;
  action: string;
  modified_at?: Date;
  user_id?: string | null;
  quiz_question_id?: number | null;
  course_id?: number | null;
  courses_content_id?: number | null;
  /** to get the reference with the quiz id table */
  quiz_id?: string | null;
  learning_path_id?: string | null;
}
const audit_logs = {
  tableName: 'audit_logs',
  columns: ['id', 'content_type', 'content_id', 'action', 'modified_at', 'user_id', 'quiz_question_id', 'course_id', 'courses_content_id', 'quiz_id', 'learning_path_id'],
  requiredForInsert: ['id', 'content_type', 'content_id', 'action'],
  primaryKey: 'id',
  foreignKeys: {
    quiz_question_id: { table: 'quiz_questions', column: 'id', $type: null as unknown as QuizQuestions },
    course_id: { table: 'courses', column: 'id', $type: null as unknown as Courses },
    courses_content_id: { table: 'courses_content', column: 'id', $type: null as unknown as CoursesContent },
    quiz_id: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    learning_path_id: { table: 'learning_paths', column: 'id', $type: null as unknown as LearningPaths },
  },
  $type: null as unknown as AuditLogs,
  $input: null as unknown as AuditLogsInput
} as const;

// Table cart_items
export interface CartItems {
  id: string;
  cart_id: string | null;
  program_id: number | null;
  price: number;
  created_at: Date | null;
}
export interface CartItemsInput {
  id?: string;
  cart_id?: string | null;
  program_id?: number | null;
  price: number;
  created_at?: Date | null;
}
const cart_items = {
  tableName: 'cart_items',
  columns: ['id', 'cart_id', 'program_id', 'price', 'created_at'],
  requiredForInsert: ['price'],
  primaryKey: 'id',
  foreignKeys: {
    cart_id: { table: 'carts', column: 'id', $type: null as unknown as Carts },
    program_id: { table: 'concours_learningpaths', column: 'id', $type: null as unknown as ConcoursLearningpaths },
  },
  $type: null as unknown as CartItems,
  $input: null as unknown as CartItemsInput
} as const;

// Table carts
export interface Carts {
  id: string;
  user_id: string | null;
  created_at: Date | null;
  updated_at: Date | null;
  status: string | null;
  total_amount: number | null;
}
export interface CartsInput {
  id?: string;
  user_id?: string | null;
  created_at?: Date | null;
  updated_at?: Date | null;
  status?: string | null;
  total_amount?: number | null;
}
const carts = {
  tableName: 'carts',
  columns: ['id', 'user_id', 'created_at', 'updated_at', 'status', 'total_amount'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown /* users */ }, },
  $type: null as unknown as Carts,
  $input: null as unknown as CartsInput
} as const;

// Table challenges
export interface Challenges {
  id: string;
  user_id: string | null;
  challenge_type: string | null;
  target: number | null;
  progress: number | null;
  is_completed: boolean | null;
  start_date: Date | null;
  end_date: Date | null;
  created_at: Date | null;
  name: string | null;
  type: string | null;
  goal: number | null;
  reward_points: number | null;
}
export interface ChallengesInput {
  id?: string;
  user_id?: string | null;
  challenge_type?: string | null;
  target?: number | null;
  progress?: number | null;
  is_completed?: boolean | null;
  start_date?: Date | null;
  end_date?: Date | null;
  created_at?: Date | null;
  name?: string | null;
  type?: string | null;
  goal?: number | null;
  reward_points?: number | null;
}
const challenges = {
  tableName: 'challenges',
  columns: ['id', 'user_id', 'challenge_type', 'target', 'progress', 'is_completed', 'start_date', 'end_date', 'created_at', 'name', 'type', 'goal', 'reward_points'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as Challenges,
  $input: null as unknown as ChallengesInput
} as const;

// Table chat_rooms
export interface ChatRooms {
  id: string;
  name: string | null;
  created_at: Date | null;
  type: string | null;
}
export interface ChatRoomsInput {
  id?: string;
  name?: string | null;
  created_at?: Date | null;
  type?: string | null;
}
const chat_rooms = {
  tableName: 'chat_rooms',
  columns: ['id', 'name', 'created_at', 'type'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as ChatRooms,
  $input: null as unknown as ChatRoomsInput
} as const;

// Table class_difficulty_credits
export interface ClassDifficultyCredits {
  class_id: string;
  difficulty_level: number;
  max_credits_course: number;
  max_credits_exam: number;
}
export interface ClassDifficultyCreditsInput {
  class_id: string;
  difficulty_level: number;
  max_credits_course: number;
  max_credits_exam: number;
}
const class_difficulty_credits = {
  tableName: 'class_difficulty_credits',
  columns: ['class_id', 'difficulty_level', 'max_credits_course', 'max_credits_exam'],
  requiredForInsert: ['class_id', 'difficulty_level', 'max_credits_course', 'max_credits_exam'],
  primaryKey: 'class_id',
  foreignKeys: { class_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as ClassDifficultyCredits,
  $input: null as unknown as ClassDifficultyCreditsInput
} as const;

// Table class_levels
export interface ClassLevels {
  id: number;
  class_id: string | null;
  level: number;
  xp_threshold: number;
  level_name: string;
}
export interface ClassLevelsInput {
  id?: number;
  class_id?: string | null;
  level: number;
  xp_threshold: number;
  level_name: string;
}
const class_levels = {
  tableName: 'class_levels',
  columns: ['id', 'class_id', 'level', 'xp_threshold', 'level_name'],
  requiredForInsert: ['level', 'xp_threshold', 'level_name'],
  primaryKey: 'id',
  foreignKeys: { class_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as ClassLevels,
  $input: null as unknown as ClassLevelsInput
} as const;

// Table concours
export interface Concours {
  id: string;
  created_at: Date;
  name: string | null;
  dates: any | null;
  nextDate: Date | null;
  schoolId: string | null;
  description: string | null;
  image: Json | null;
}
export interface ConcoursInput {
  id?: string;
  created_at?: Date;
  name?: string | null;
  dates?: any | null;
  nextDate?: Date | null;
  schoolId?: string | null;
  description?: string | null;
  image?: Json | null;
}
const concours = {
  tableName: 'concours',
  columns: ['id', 'created_at', 'name', 'dates', 'nextDate', 'schoolId', 'description', 'image'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { schoolId: { table: 'schools', column: 'id', $type: null as unknown as Schools }, },
  $type: null as unknown as Concours,
  $input: null as unknown as ConcoursInput
} as const;

// Table concours_learningpaths
export interface ConcoursLearningpaths {
  id: number;
  created_at: Date;
  learningPathId: string | null;
  concourId: string | null;
  price: number | null;
  isActive: boolean | null;
}
export interface ConcoursLearningpathsInput {
  id: number;
  created_at?: Date;
  learningPathId?: string | null;
  concourId?: string | null;
  price?: number | null;
  isActive?: boolean | null;
}
const concours_learningpaths = {
  tableName: 'concours_learningpaths',
  columns: ['id', 'created_at', 'learningPathId', 'concourId', 'price', 'isActive'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    learningPathId: { table: 'learning_paths', column: 'id', $type: null as unknown as LearningPaths },
    concourId: { table: 'concours', column: 'id', $type: null as unknown as Concours },
  },
  $type: null as unknown as ConcoursLearningpaths,
  $input: null as unknown as ConcoursLearningpathsInput
} as const;

// Table content_interactions
export interface ContentInteractions {
  id: string;
  user_id: string | null;
  content_type: string | null;
  content_id: string | null;
  interaction_start: Date | null;
  interaction_end: Date | null;
  duration: string | null;
  /** the creation daate of the content_interaction */
  created_at: Date | null;
}
export interface ContentInteractionsInput {
  id?: string;
  user_id?: string | null;
  content_type?: string | null;
  content_id?: string | null;
  interaction_start?: Date | null;
  interaction_end?: Date | null;
  duration?: string | null;
  /** the creation daate of the content_interaction */
  created_at?: Date | null;
}
const content_interactions = {
  tableName: 'content_interactions',
  columns: ['id', 'user_id', 'content_type', 'content_id', 'interaction_start', 'interaction_end', 'duration', 'created_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as ContentInteractions,
  $input: null as unknown as ContentInteractionsInput
} as const;

// Table course_learningpath
export interface CourseLearningpath {
  created_at: Date;
  courseId: number | null;
  lpId: string | null;
  id: string;
}
export interface CourseLearningpathInput {
  created_at?: Date;
  courseId?: number | null;
  lpId?: string | null;
  id: string;
}
const course_learningpath = {
  tableName: 'course_learningpath',
  columns: ['created_at', 'courseId', 'lpId', 'id'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    courseId: { table: 'courses', column: 'id', $type: null as unknown as Courses },
    lpId: { table: 'learning_paths', column: 'id', $type: null as unknown as LearningPaths },
  },
  $type: null as unknown as CourseLearningpath,
  $input: null as unknown as CourseLearningpathInput
} as const;

// Table course_progress_summary
export interface CourseProgressSummary {
  id: number;
  user_id: string;
  course_id: number;
  total_sections: number;
  completed_sections: number;
  last_updated: Date;
  progress_percentage: number | null;
  is_completed: boolean | null;
}
export interface CourseProgressSummaryInput {
  id: number;
  user_id: string;
  course_id: number;
  total_sections: number;
  completed_sections?: number;
  last_updated?: Date;
  progress_percentage?: number | null;
  is_completed?: boolean | null;
}
const course_progress_summary = {
  tableName: 'course_progress_summary',
  columns: ['id', 'user_id', 'course_id', 'total_sections', 'completed_sections', 'last_updated', 'progress_percentage', 'is_completed'],
  requiredForInsert: ['id', 'user_id', 'course_id', 'total_sections'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    course_id: { table: 'courses', column: 'id', $type: null as unknown as Courses },
  },
  $type: null as unknown as CourseProgressSummary,
  $input: null as unknown as CourseProgressSummaryInput
} as const;

// Table course_tags
export interface CourseTags {
  course_id: number;
  tag_id: string;
}
export interface CourseTagsInput {
  course_id: number;
  tag_id: string;
}
const course_tags = {
  tableName: 'course_tags',
  columns: ['course_id', 'tag_id'],
  requiredForInsert: ['course_id', 'tag_id'],
  primaryKey: 'course_id',
  foreignKeys: {
    course_id: { table: 'courses', column: 'id', $type: null as unknown as Courses },
    tag_id: { table: 'tags', column: 'id', $type: null as unknown as Tags },
  },
  $type: null as unknown as CourseTags,
  $input: null as unknown as CourseTagsInput
} as const;

// Table course_videos
/** Stores videos associated with courses */
export interface CourseVideos {
  /** Primary UUID key for the video */
  id: string;
  created_at: Date;
  updated_at: Date;
  /** Optional display title for the video */
  title: string | null;
  /** Optional description of the video content */
  description: string | null;
  /** Original filename of the uploaded video */
  filename: string;
  /** Size of the video in bytes */
  filesize: number;
  /** Duration of the video in seconds */
  duration: number | null;
  /** Public URL from UploadThing */
  url: string;
  /** UploadThing reference ID */
  uploadthing_id: string | null;
  /** Order of videos within content */
  order_index: number;
  /** Current status of the video */
  status: string | null;
  /** MIME type of the video file */
  mime_type: string | null;
  /** Additional metadata for the video */
  metadata: Json | null;
  /** Soft delete flag */
  is_active: boolean | null;
  course_id: number;
  mux_asset_id: string | null;
  mux_playback_id: string | null;
}
/** Stores videos associated with courses */
export interface CourseVideosInput {
  /** Primary UUID key for the video */
  id?: string;
  created_at?: Date;
  updated_at?: Date;
  /** Optional display title for the video */
  title?: string | null;
  /** Optional description of the video content */
  description?: string | null;
  /** Original filename of the uploaded video */
  filename: string;
  /** Size of the video in bytes */
  filesize: number;
  /** Duration of the video in seconds */
  duration?: number | null;
  /** Public URL from UploadThing */
  url: string;
  /** UploadThing reference ID */
  uploadthing_id?: string | null;
  /** Order of videos within content */
  order_index?: number;
  /** Current status of the video */
  status?: string | null;
  /** MIME type of the video file */
  mime_type?: string | null;
  /** Additional metadata for the video */
  metadata?: Json | null;
  /** Soft delete flag */
  is_active?: boolean | null;
  course_id: number;
  mux_asset_id?: string | null;
  mux_playback_id?: string | null;
}
const course_videos = {
  tableName: 'course_videos',
  columns: ['id', 'created_at', 'updated_at', 'title', 'description', 'filename', 'filesize', 'duration', 'url', 'uploadthing_id', 'order_index', 'status', 'mime_type', 'metadata', 'is_active', 'course_id', 'mux_asset_id', 'mux_playback_id'],
  requiredForInsert: ['filename', 'filesize', 'url', 'course_id'],
  primaryKey: 'id',
  foreignKeys: { course_id: { table: 'courses', column: 'id', $type: null as unknown as Courses }, },
  $type: null as unknown as CourseVideos,
  $input: null as unknown as CourseVideosInput
} as const;

// Table courses
export interface Courses {
  id: number;
  created_at: Date;
  name: string;
  description: string | null;
  image: Json | null;
  status: boolean;
  learners: string[] | null;
  groups: string[] | null;
  category: string | null;
  tags: string[] | null;
  accessKey: string | null;
  /** the goals of the course */
  goals: string[] | null;
}
export interface CoursesInput {
  id: number;
  created_at?: Date;
  name?: string;
  description?: string | null;
  image?: Json | null;
  status?: boolean;
  learners?: string[] | null;
  groups?: string[] | null;
  category?: string | null;
  tags?: string[] | null;
  accessKey?: string | null;
  /** the goals of the course */
  goals?: string[] | null;
}
const courses = {
  tableName: 'courses',
  columns: ['id', 'created_at', 'name', 'description', 'image', 'status', 'learners', 'groups', 'category', 'tags', 'accessKey', 'goals'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { category: { table: 'courses_categories', column: 'id', $type: null as unknown as CoursesCategories }, },
  $type: null as unknown as Courses,
  $input: null as unknown as CoursesInput
} as const;

// Table courses_categories
/** This is a duplicate of courses_categories */
export interface CoursesCategories {
  created_at: Date;
  name: string | null;
  description: string | null;
  id: string;
}
/** This is a duplicate of courses_categories */
export interface CoursesCategoriesInput {
  created_at?: Date;
  name?: string | null;
  description?: string | null;
  id?: string;
}
const courses_categories = {
  tableName: 'courses_categories',
  columns: ['created_at', 'name', 'description', 'id'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as CoursesCategories,
  $input: null as unknown as CoursesCategoriesInput
} as const;

// Table courses_content
export interface CoursesContent {
  id: number;
  created_at: Date;
  courseId: number;
  content: Json | null;
  last_modify_at: Date | null;
  name: string | null;
  order: number | null;
}
export interface CoursesContentInput {
  id: number;
  created_at?: Date;
  courseId: number;
  content?: Json | null;
  last_modify_at?: Date | null;
  name?: string | null;
  order?: number | null;
}
const courses_content = {
  tableName: 'courses_content',
  columns: ['id', 'created_at', 'courseId', 'content', 'last_modify_at', 'name', 'order'],
  requiredForInsert: ['id', 'courseId'],
  primaryKey: 'id',
  foreignKeys: { courseId: { table: 'courses', column: 'id', $type: null as unknown as Courses }, },
  $type: null as unknown as CoursesContent,
  $input: null as unknown as CoursesContentInput
} as const;

// Table courses_content_replica
export interface CoursesContentReplica {
  id: number;
  created_at: Date;
  courseId: number;
  content: Json | null;
  last_modify_at: Date | null;
  name: string | null;
  order: number | null;
}
export interface CoursesContentReplicaInput {
  id: number;
  created_at?: Date;
  courseId: number;
  content?: Json | null;
  last_modify_at?: Date | null;
  name?: string | null;
  order?: number | null;
}
const courses_content_replica = {
  tableName: 'courses_content_replica',
  columns: ['id', 'created_at', 'courseId', 'content', 'last_modify_at', 'name', 'order'],
  requiredForInsert: ['id', 'courseId'],
  primaryKey: 'id',
  foreignKeys: { courseId: { table: 'courses', column: 'id', $type: null as unknown as Courses }, },
  $type: null as unknown as CoursesContentReplica,
  $input: null as unknown as CoursesContentReplicaInput
} as const;

// Table courses_replica
export interface CoursesReplica {
  id: number;
  created_at: Date;
  name: string;
  description: string | null;
  image: Json | null;
  status: boolean;
  learners: string[] | null;
  groups: string[] | null;
  category: string | null;
  tags: string[] | null;
  accessKey: string | null;
  goals: string[] | null;
}
export interface CoursesReplicaInput {
  id: number;
  created_at?: Date;
  name?: string;
  description?: string | null;
  image?: Json | null;
  status?: boolean;
  learners?: string[] | null;
  groups?: string[] | null;
  category?: string | null;
  tags?: string[] | null;
  accessKey?: string | null;
  goals?: string[] | null;
}
const courses_replica = {
  tableName: 'courses_replica',
  columns: ['id', 'created_at', 'name', 'description', 'image', 'status', 'learners', 'groups', 'category', 'tags', 'accessKey', 'goals'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as CoursesReplica,
  $input: null as unknown as CoursesReplicaInput
} as const;

// Table daily_challenges
export interface DailyChallenges {
  id: string;
  user_id: string | null;
  challenge_date: Date | null;
  is_completed: boolean | null;
  streak_count: number | null;
  created_at: Date | null;
}
export interface DailyChallengesInput {
  id?: string;
  user_id?: string | null;
  challenge_date?: Date | null;
  is_completed?: boolean | null;
  streak_count?: number | null;
  created_at?: Date | null;
}
const daily_challenges = {
  tableName: 'daily_challenges',
  columns: ['id', 'user_id', 'challenge_date', 'is_completed', 'streak_count', 'created_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as DailyChallenges,
  $input: null as unknown as DailyChallengesInput
} as const;

// Table group_content
export interface GroupContent {
  id: string;
  group_id: string | null;
  content_id: string;
  content_type: string;
  created_at: Date | null;
}
export interface GroupContentInput {
  id?: string;
  group_id?: string | null;
  content_id: string;
  content_type: string;
  created_at?: Date | null;
}
const group_content = {
  tableName: 'group_content',
  columns: ['id', 'group_id', 'content_id', 'content_type', 'created_at'],
  requiredForInsert: ['content_id', 'content_type'],
  primaryKey: 'id',
  foreignKeys: { group_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as GroupContent,
  $input: null as unknown as GroupContentInput
} as const;

// Table groups
export interface Groups {
  created_at: Date;
  name: string;
  description: string | null;
  learners: string[] | null;
  image: Json | null;
  id: string;
  /** standalong group or formation one */
  type: string | null;
  schoolId: string | null;
}
export interface GroupsInput {
  created_at?: Date;
  name: string;
  description?: string | null;
  learners?: string[] | null;
  image?: Json | null;
  id?: string;
  /** standalong group or formation one */
  type?: string | null;
  schoolId?: string | null;
}
const groups = {
  tableName: 'groups',
  columns: ['created_at', 'name', 'description', 'learners', 'image', 'id', 'type', 'schoolId'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: { schoolId: { table: 'schools', column: 'id', $type: null as unknown as Schools }, },
  $type: null as unknown as Groups,
  $input: null as unknown as GroupsInput
} as const;

// Table learning_paths
export interface LearningPaths {
  created_at: Date;
  title: string | null;
  description: string | null;
  status: boolean | null;
  last_modified_at: Date | null;
  start_at: Date | null;
  end_at: Date | null;
  image: Json | null;
  duration: Json[] | null;
  students: string[] | null;
  groups: string[] | null;
  content: Json | null;
  /** the learning path id */
  id: string;
  course_count: number | null;
  quiz_count: number | null;
  total_duration: number | null;
}
export interface LearningPathsInput {
  created_at?: Date;
  title?: string | null;
  description?: string | null;
  status?: boolean | null;
  last_modified_at?: Date | null;
  start_at?: Date | null;
  end_at?: Date | null;
  image?: Json | null;
  duration?: Json[] | null;
  students?: string[] | null;
  groups?: string[] | null;
  content?: Json | null;
  /** the learning path id */
  id?: string;
  course_count?: number | null;
  quiz_count?: number | null;
  total_duration?: number | null;
}
const learning_paths = {
  tableName: 'learning_paths',
  columns: ['created_at', 'title', 'description', 'status', 'last_modified_at', 'start_at', 'end_at', 'image', 'duration', 'students', 'groups', 'content', 'id', 'course_count', 'quiz_count', 'total_duration'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as LearningPaths,
  $input: null as unknown as LearningPathsInput
} as const;

// Table learning_sessions
export interface LearningSessions {
  id: string;
  user_id: string | null;
  session_start: Date;
  session_end: Date | null;
  last_heartbeat: Date | null;
  created_at: Date | null;
  content_type: string | null;
  content_id: string | null;
  session_type: string | null;
  duration: string | null;
  is_completed: boolean | null;
}
export interface LearningSessionsInput {
  id?: string;
  user_id?: string | null;
  session_start: Date;
  session_end?: Date | null;
  last_heartbeat?: Date | null;
  created_at?: Date | null;
  content_type?: string | null;
  content_id?: string | null;
  session_type?: string | null;
  duration?: string | null;
  is_completed?: boolean | null;
}
const learning_sessions = {
  tableName: 'learning_sessions',
  columns: ['id', 'user_id', 'session_start', 'session_end', 'last_heartbeat', 'created_at', 'content_type', 'content_id', 'session_type', 'duration', 'is_completed'],
  requiredForInsert: ['session_start'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown /* users */ }, },
  $type: null as unknown as LearningSessions,
  $input: null as unknown as LearningSessionsInput
} as const;

// Table messages
export interface Messages {
  id: string;
  chat_room_id: string | null;
  user_id: string | null;
  parent_message_id: string | null;
  content: string;
  created_at: Date | null;
  deleted: string[] | null;
  reads: string[] | null;
  attachments: Json[] | null;
}
export interface MessagesInput {
  id?: string;
  chat_room_id?: string | null;
  user_id?: string | null;
  parent_message_id?: string | null;
  content: string;
  created_at?: Date | null;
  deleted?: string[] | null;
  reads?: string[] | null;
  attachments?: Json[] | null;
}
const messages = {
  tableName: 'messages',
  columns: ['id', 'chat_room_id', 'user_id', 'parent_message_id', 'content', 'created_at', 'deleted', 'reads', 'attachments'],
  requiredForInsert: ['content'],
  primaryKey: 'id',
  foreignKeys: {
    chat_room_id: { table: 'chat_rooms', column: 'id', $type: null as unknown as ChatRooms },
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    parent_message_id: { table: 'messages', column: 'id', $type: null as unknown as Messages },
  },
  $type: null as unknown as Messages,
  $input: null as unknown as MessagesInput
} as const;

// Table participants
export interface Participants {
  id: string;
  chat_room_id: string | null;
  created_at: Date | null;
  userId: string;
}
export interface ParticipantsInput {
  id?: string;
  chat_room_id?: string | null;
  created_at?: Date | null;
  userId: string;
}
const participants = {
  tableName: 'participants',
  columns: ['id', 'chat_room_id', 'created_at', 'userId'],
  requiredForInsert: ['userId'],
  primaryKey: 'id',
  foreignKeys: {
    chat_room_id: { table: 'chat_rooms', column: 'id', $type: null as unknown as ChatRooms },
    userId: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
  },
  $type: null as unknown as Participants,
  $input: null as unknown as ParticipantsInput
} as const;

// Table payment_status
export interface PaymentStatus {
  id: string;
  payment_id: string | null;
  status: string;
  notes: string | null;
  created_at: Date | null;
}
export interface PaymentStatusInput {
  id?: string;
  payment_id?: string | null;
  status: string;
  notes?: string | null;
  created_at?: Date | null;
}
const payment_status = {
  tableName: 'payment_status',
  columns: ['id', 'payment_id', 'status', 'notes', 'created_at'],
  requiredForInsert: ['status'],
  primaryKey: 'id',
  foreignKeys: { payment_id: { table: 'payments', column: 'id', $type: null as unknown as Payments }, },
  $type: null as unknown as PaymentStatus,
  $input: null as unknown as PaymentStatusInput
} as const;

// Table payments
export interface Payments {
  id: string;
  cart_id: string | null;
  user_id: string | null;
  amount: number;
  phone_number: string;
  payment_provider: string | null;
  payment_reference: string | null;
  created_at: Date | null;
  updated_at: Date | null;
  /** the trx_refernce to identify in notchpay */
  trx_reference: string;
  /** the status of the paiemnt */
  status: string | null;
}
export interface PaymentsInput {
  id?: string;
  cart_id?: string | null;
  user_id?: string | null;
  amount: number;
  phone_number: string;
  payment_provider?: string | null;
  payment_reference?: string | null;
  created_at?: Date | null;
  updated_at?: Date | null;
  /** the trx_refernce to identify in notchpay */
  trx_reference: string;
  /** the status of the paiemnt */
  status?: string | null;
}
const payments = {
  tableName: 'payments',
  columns: ['id', 'cart_id', 'user_id', 'amount', 'phone_number', 'payment_provider', 'payment_reference', 'created_at', 'updated_at', 'trx_reference', 'status'],
  requiredForInsert: ['amount', 'phone_number', 'trx_reference'],
  primaryKey: 'id',
  foreignKeys: {
    cart_id: { table: 'carts', column: 'id', $type: null as unknown as Carts },
    user_id: { table: 'users', column: 'id', $type: null as unknown /* users */ },
  },
  $type: null as unknown as Payments,
  $input: null as unknown as PaymentsInput
} as const;

// Table permissions
export interface Permissions {
  id: string;
  created_at: Date;
  role_id: string | null;
  can_create: boolean | null;
  can_read: boolean | null;
  can_update: boolean | null;
  can_delete: boolean | null;
}
export interface PermissionsInput {
  id?: string;
  created_at?: Date;
  role_id?: string | null;
  can_create?: boolean | null;
  can_read?: boolean | null;
  can_update?: boolean | null;
  can_delete?: boolean | null;
}
const permissions = {
  tableName: 'permissions',
  columns: ['id', 'created_at', 'role_id', 'can_create', 'can_read', 'can_update', 'can_delete'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { role_id: { table: 'roles', column: 'id', $type: null as unknown as Roles }, },
  $type: null as unknown as Permissions,
  $input: null as unknown as PermissionsInput
} as const;

// Table quiz
export interface Quiz {
  created_at: Date;
  name: string;
  description: string | null;
  image: Json | null;
  status: boolean;
  learners: string[] | null;
  groups: string[] | null;
  tags: string[] | null;
  accessKey: string | null;
  id: string;
  /** the course the quiz is in relation with */
  course: number | null;
  /** the courrse content the quiz is in relation with */
  course_content: number | null;
  category: string | null;
  selectedCourses: string[] | null;
}
export interface QuizInput {
  created_at?: Date;
  name?: string;
  description?: string | null;
  image?: Json | null;
  status?: boolean;
  learners?: string[] | null;
  groups?: string[] | null;
  tags?: string[] | null;
  accessKey?: string | null;
  id?: string;
  /** the course the quiz is in relation with */
  course?: number | null;
  /** the courrse content the quiz is in relation with */
  course_content?: number | null;
  category?: string | null;
  selectedCourses?: string[] | null;
}
const quiz = {
  tableName: 'quiz',
  columns: ['created_at', 'name', 'description', 'image', 'status', 'learners', 'groups', 'tags', 'accessKey', 'id', 'course', 'course_content', 'category', 'selectedCourses'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    course: { table: 'courses', column: 'id', $type: null as unknown as Courses },
    course_content: { table: 'courses_content', column: 'id', $type: null as unknown as CoursesContent },
    category: { table: 'courses_categories', column: 'id', $type: null as unknown as CoursesCategories },
  },
  $type: null as unknown as Quiz,
  $input: null as unknown as QuizInput
} as const;

// Table quiz_attempts
export interface QuizAttempts {
  id: number;
  user_id: string | null;
  quiz_id: string | null;
  start_time: Date | null;
  end_time: Date | null;
  score: number | null;
  status: string | null;
  timeSpent: number | null;
  current_question_index: number | null;
  answers: Json | null;
  selected_answers: string[] | null;
  last_modified_at: Date | null;
}
export interface QuizAttemptsInput {
  id?: number;
  user_id?: string | null;
  quiz_id?: string | null;
  start_time?: Date | null;
  end_time?: Date | null;
  score?: number | null;
  status?: string | null;
  timeSpent?: number | null;
  current_question_index?: number | null;
  answers?: Json | null;
  selected_answers?: string[] | null;
  last_modified_at?: Date | null;
}
const quiz_attempts = {
  tableName: 'quiz_attempts',
  columns: ['id', 'user_id', 'quiz_id', 'start_time', 'end_time', 'score', 'status', 'timeSpent', 'current_question_index', 'answers', 'selected_answers', 'last_modified_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    quiz_id: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
  },
  $type: null as unknown as QuizAttempts,
  $input: null as unknown as QuizAttemptsInput
} as const;

// Table quiz_courses
/** relation betwwen quiz and courses */
export interface QuizCourses {
  id: number;
  created_at: Date;
  quizId: string | null;
  courseId: number | null;
}
/** relation betwwen quiz and courses */
export interface QuizCoursesInput {
  id: number;
  created_at?: Date;
  quizId?: string | null;
  courseId?: number | null;
}
const quiz_courses = {
  tableName: 'quiz_courses',
  columns: ['id', 'created_at', 'quizId', 'courseId'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    quizId: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    courseId: { table: 'courses', column: 'id', $type: null as unknown as Courses },
  },
  $type: null as unknown as QuizCourses,
  $input: null as unknown as QuizCoursesInput
} as const;

// Table quiz_learningpath
export interface QuizLearningpath {
  created_at: Date;
  quizId: string | null;
  lpId: string | null;
  id: string;
}
export interface QuizLearningpathInput {
  created_at?: Date;
  quizId?: string | null;
  lpId?: string | null;
  id: string;
}
const quiz_learningpath = {
  tableName: 'quiz_learningpath',
  columns: ['created_at', 'quizId', 'lpId', 'id'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    quizId: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    lpId: { table: 'learning_paths', column: 'id', $type: null as unknown as LearningPaths },
  },
  $type: null as unknown as QuizLearningpath,
  $input: null as unknown as QuizLearningpathInput
} as const;

// Table quiz_pin
export interface QuizPin {
  id: number;
  created_at: Date;
  quizId: string | null;
  userId: string | null;
}
export interface QuizPinInput {
  id: number;
  created_at?: Date;
  quizId?: string | null;
  userId?: string | null;
}
const quiz_pin = {
  tableName: 'quiz_pin',
  columns: ['id', 'created_at', 'quizId', 'userId'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    quizId: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    userId: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
  },
  $type: null as unknown as QuizPin,
  $input: null as unknown as QuizPinInput
} as const;

// Table quiz_question_template
/** This is a duplicate of quiz_questions */
export interface QuizQuestionTemplate {
  id: number;
  created_at: Date;
  content: Json | null;
  last_modify_at: Date | null;
  name: string | null;
  order: number | null;
  type: string | null;
  options: Json[] | null;
  correct: string[] | null;
  isMultiple: boolean | null;
  title: string | null;
  hasImg: boolean | null;
  hasEditor: boolean | null;
  hasDetails: boolean | null;
  image: Json | null;
  details: Json[] | null;
  difficulty: number | null;
  tags: string[] | null;
  group_id: string | null;
  tag: string[] | null;
}
/** This is a duplicate of quiz_questions */
export interface QuizQuestionTemplateInput {
  id: number;
  created_at?: Date;
  content?: Json | null;
  last_modify_at?: Date | null;
  name?: string | null;
  order?: number | null;
  type?: string | null;
  options?: Json[] | null;
  correct?: string[] | null;
  isMultiple?: boolean | null;
  title?: string | null;
  hasImg?: boolean | null;
  hasEditor?: boolean | null;
  hasDetails?: boolean | null;
  image?: Json | null;
  details?: Json[] | null;
  difficulty?: number | null;
  tags?: string[] | null;
  group_id?: string | null;
  tag?: string[] | null;
}
const quiz_question_template = {
  tableName: 'quiz_question_template',
  columns: ['id', 'created_at', 'content', 'last_modify_at', 'name', 'order', 'type', 'options', 'correct', 'isMultiple', 'title', 'hasImg', 'hasEditor', 'hasDetails', 'image', 'details', 'difficulty', 'tags', 'group_id', 'tag'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { group_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as QuizQuestionTemplate,
  $input: null as unknown as QuizQuestionTemplateInput
} as const;

// Table quiz_questions
export interface QuizQuestions {
  id: number;
  created_at: Date;
  content: Json | null;
  last_modify_at: Date | null;
  name: string | null;
  order: number | null;
  quizId: string;
  type: string | null;
  options: Json[] | null;
  correct: string[] | null;
  isMultiple: boolean | null;
  title: string | null;
  hasImg: boolean | null;
  hasEditor: boolean | null;
  hasDetails: boolean | null;
  image: Json | null;
  details: Json[] | null;
  justificatif: string | null;
}
export interface QuizQuestionsInput {
  id: number;
  created_at?: Date;
  content?: Json | null;
  last_modify_at?: Date | null;
  name?: string | null;
  order?: number | null;
  quizId: string;
  type?: string | null;
  options?: Json[] | null;
  correct?: string[] | null;
  isMultiple?: boolean | null;
  title?: string | null;
  hasImg?: boolean | null;
  hasEditor?: boolean | null;
  hasDetails?: boolean | null;
  image?: Json | null;
  details?: Json[] | null;
  justificatif?: string | null;
}
const quiz_questions = {
  tableName: 'quiz_questions',
  columns: ['id', 'created_at', 'content', 'last_modify_at', 'name', 'order', 'quizId', 'type', 'options', 'correct', 'isMultiple', 'title', 'hasImg', 'hasEditor', 'hasDetails', 'image', 'details', 'justificatif'],
  requiredForInsert: ['id', 'quizId'],
  primaryKey: 'id',
  foreignKeys: { quizId: { table: 'quiz', column: 'id', $type: null as unknown as Quiz }, },
  $type: null as unknown as QuizQuestions,
  $input: null as unknown as QuizQuestionsInput
} as const;

// Table quiz_tags
export interface QuizTags {
  quiz_id: string;
  tag_id: string;
}
export interface QuizTagsInput {
  quiz_id: string;
  tag_id: string;
}
const quiz_tags = {
  tableName: 'quiz_tags',
  columns: ['quiz_id', 'tag_id'],
  requiredForInsert: ['quiz_id', 'tag_id'],
  primaryKey: 'quiz_id',
  foreignKeys: {
    quiz_id: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    tag_id: { table: 'tags', column: 'id', $type: null as unknown as Tags },
  },
  $type: null as unknown as QuizTags,
  $input: null as unknown as QuizTagsInput
} as const;

// Table resource_permissions
export interface ResourcePermissions {
  id: string;
  user_id: string | null;
  resource_id: string;
  can_create: boolean | null;
  can_read: boolean | null;
  can_update: boolean | null;
  can_delete: boolean | null;
  /** a role can have permission to anglobe permission to users */
  role_id: string | null;
  created_at: Date;
}
export interface ResourcePermissionsInput {
  id?: string;
  user_id?: string | null;
  resource_id: string;
  can_create?: boolean | null;
  can_read?: boolean | null;
  can_update?: boolean | null;
  can_delete?: boolean | null;
  /** a role can have permission to anglobe permission to users */
  role_id?: string | null;
  created_at?: Date;
}
const resource_permissions = {
  tableName: 'resource_permissions',
  columns: ['id', 'user_id', 'resource_id', 'can_create', 'can_read', 'can_update', 'can_delete', 'role_id', 'created_at'],
  requiredForInsert: ['resource_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    resource_id: { table: 'ressources', column: 'id', $type: null as unknown as Ressources },
    role_id: { table: 'roles', column: 'id', $type: null as unknown as Roles },
  },
  $type: null as unknown as ResourcePermissions,
  $input: null as unknown as ResourcePermissionsInput
} as const;

// Table ressources
export interface Ressources {
  created_at: Date;
  name: string | null;
  id: string;
  code: string | null;
  slug: string | null;
}
export interface RessourcesInput {
  created_at?: Date;
  name?: string | null;
  id?: string;
  code?: string | null;
  slug?: string | null;
}
const ressources = {
  tableName: 'ressources',
  columns: ['created_at', 'name', 'id', 'code', 'slug'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Ressources,
  $input: null as unknown as RessourcesInput
} as const;

// Table rewards
export interface Rewards {
  id: string;
  user_id: string | null;
  reward_type: string | null;
  reward_description: string | null;
  earned_at: Date | null;
}
export interface RewardsInput {
  id?: string;
  user_id?: string | null;
  reward_type?: string | null;
  reward_description?: string | null;
  earned_at?: Date | null;
}
const rewards = {
  tableName: 'rewards',
  columns: ['id', 'user_id', 'reward_type', 'reward_description', 'earned_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as Rewards,
  $input: null as unknown as RewardsInput
} as const;

// Table roles
export interface Roles {
  id: string;
  name: string;
}
export interface RolesInput {
  id?: string;
  name: string;
}
const roles = {
  tableName: 'roles',
  columns: ['id', 'name'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Roles,
  $input: null as unknown as RolesInput
} as const;

// Table schools
export interface Schools {
  created_at: Date;
  subdomain: string;
  brand: Json | null;
  tenant_id: string;
  id: string;
  description: string | null;
  name: string | null;
  imageUrl: string | null;
  isActive: boolean | null;
  localisation: string | null;
}
export interface SchoolsInput {
  created_at?: Date;
  subdomain?: string;
  brand?: Json | null;
  tenant_id?: string;
  id?: string;
  description?: string | null;
  name?: string | null;
  imageUrl?: string | null;
  isActive?: boolean | null;
  localisation?: string | null;
}
const schools = {
  tableName: 'schools',
  columns: ['created_at', 'subdomain', 'brand', 'tenant_id', 'id', 'description', 'name', 'imageUrl', 'isActive', 'localisation'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Schools,
  $input: null as unknown as SchoolsInput
} as const;

// Table staff_invitations
export interface StaffInvitations {
  id: string;
  email: string;
  created_at: Date | null;
  updated_at: Date | null;
  invitation_sent_at: Date | null;
  status: string | null;
  invited_by: string | null;
}
export interface StaffInvitationsInput {
  id?: string;
  email: string;
  created_at?: Date | null;
  updated_at?: Date | null;
  invitation_sent_at?: Date | null;
  status?: string | null;
  invited_by?: string | null;
}
const staff_invitations = {
  tableName: 'staff_invitations',
  columns: ['id', 'email', 'created_at', 'updated_at', 'invitation_sent_at', 'status', 'invited_by'],
  requiredForInsert: ['email'],
  primaryKey: 'id',
  foreignKeys: { invited_by: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as StaffInvitations,
  $input: null as unknown as StaffInvitationsInput
} as const;

// Table started_exams
export interface StartedExams {
  id: number;
  created_at: Date;
  user_id: string | null;
  quiz_id: string | null;
  score: number | null;
  answers: Json | null;
  closed_at: Date | null;
  proctoring_issues: Json | null;
  try: number | null;
  end: boolean | null;
  total_xp_gained: number | null;
}
export interface StartedExamsInput {
  id: number;
  created_at?: Date;
  user_id?: string | null;
  quiz_id?: string | null;
  score?: number | null;
  answers?: Json | null;
  closed_at?: Date | null;
  proctoring_issues?: Json | null;
  try?: number | null;
  end?: boolean | null;
  total_xp_gained?: number | null;
}
const started_exams = {
  tableName: 'started_exams',
  columns: ['id', 'created_at', 'user_id', 'quiz_id', 'score', 'answers', 'closed_at', 'proctoring_issues', 'try', 'end', 'total_xp_gained'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    quiz_id: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
  },
  $type: null as unknown as StartedExams,
  $input: null as unknown as StartedExamsInput
} as const;

// Table started_exams_questions
export interface StartedExamsQuestions {
  id: number;
  created_at: Date;
  started_exams_id: string | null;
  questionId: Json | null;
  options: Json | null;
}
export interface StartedExamsQuestionsInput {
  id: number;
  created_at?: Date;
  started_exams_id?: string | null;
  questionId?: Json | null;
  options?: Json | null;
}
const started_exams_questions = {
  tableName: 'started_exams_questions',
  columns: ['id', 'created_at', 'started_exams_id', 'questionId', 'options'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as StartedExamsQuestions,
  $input: null as unknown as StartedExamsQuestionsInput
} as const;

// Table streak_logs
export interface StreakLogs {
  id: string;
  user_id: string | null;
  streak_date: Date | null;
  streak_count: number | null;
  created_at: Date | null;
}
export interface StreakLogsInput {
  id?: string;
  user_id?: string | null;
  streak_date?: Date | null;
  streak_count?: number | null;
  created_at?: Date | null;
}
const streak_logs = {
  tableName: 'streak_logs',
  columns: ['id', 'user_id', 'streak_date', 'streak_count', 'created_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown /* users */ }, },
  $type: null as unknown as StreakLogs,
  $input: null as unknown as StreakLogsInput
} as const;

// Table tags
export interface Tags {
  id: string;
  name: string;
  created_at: Date | null;
  description: string | null;
}
export interface TagsInput {
  id?: string;
  name: string;
  created_at?: Date | null;
  description?: string | null;
}
const tags = {
  tableName: 'tags',
  columns: ['id', 'name', 'created_at', 'description'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Tags,
  $input: null as unknown as TagsInput
} as const;

// Table tags_content
export interface TagsContent {
  id: string;
  tag_id: string | null;
  content_id: string;
  content_type: string;
  created_at: Date | null;
}
export interface TagsContentInput {
  id?: string;
  tag_id?: string | null;
  content_id: string;
  content_type: string;
  created_at?: Date | null;
}
const tags_content = {
  tableName: 'tags_content',
  columns: ['id', 'tag_id', 'content_id', 'content_type', 'created_at'],
  requiredForInsert: ['content_id', 'content_type'],
  primaryKey: 'id',
  foreignKeys: { tag_id: { table: 'tags', column: 'id', $type: null as unknown as Tags }, },
  $type: null as unknown as TagsContent,
  $input: null as unknown as TagsContentInput
} as const;

// Table transactions
export interface Transactions {
  id: string;
  created_at: Date;
  email: string | null;
  amount: string | null;
  months: number | null;
  last: Date | null;
  class_id: string | null;
}
export interface TransactionsInput {
  id: string;
  created_at?: Date;
  email?: string | null;
  amount?: string | null;
  months?: number | null;
  last?: Date | null;
  class_id?: string | null;
}
const transactions = {
  tableName: 'transactions',
  columns: ['id', 'created_at', 'email', 'amount', 'months', 'last', 'class_id'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { class_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as Transactions,
  $input: null as unknown as TransactionsInput
} as const;

// Table user_activity
export interface UserActivity {
  id: string;
  user_id: string | null;
  session_start: Date | null;
  created_at: Date | null;
  /** if the session is active or not */
  status: user_activity_status | null;
  /** the last heartbeat send by the  application */
  last_heartbeat: Date | null;
  device_type: learning_session_type;
  duration: number | null;
}
export interface UserActivityInput {
  id?: string;
  user_id?: string | null;
  session_start?: Date | null;
  created_at?: Date | null;
  /** if the session is active or not */
  status?: user_activity_status | null;
  /** the last heartbeat send by the  application */
  last_heartbeat?: Date | null;
  device_type: learning_session_type;
  duration?: number | null;
}
const user_activity = {
  tableName: 'user_activity',
  columns: ['id', 'user_id', 'session_start', 'created_at', 'status', 'last_heartbeat', 'device_type', 'duration'],
  requiredForInsert: ['device_type'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as UserActivity,
  $input: null as unknown as UserActivityInput
} as const;

// Table user_answers
export interface UserAnswers {
  id: number;
  attempt_id: number | null;
  question_id: number | null;
  is_correct: boolean | null;
  selected_options: string[] | null;
  time_taken: number | null;
  submitted_at: Date | null;
}
export interface UserAnswersInput {
  id?: number;
  attempt_id?: number | null;
  question_id?: number | null;
  is_correct?: boolean | null;
  selected_options?: string[] | null;
  time_taken?: number | null;
  submitted_at?: Date | null;
}
const user_answers = {
  tableName: 'user_answers',
  columns: ['id', 'attempt_id', 'question_id', 'is_correct', 'selected_options', 'time_taken', 'submitted_at'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    attempt_id: { table: 'quiz_attempts', column: 'id', $type: null as unknown as QuizAttempts },
    question_id: { table: 'quiz_questions', column: 'id', $type: null as unknown as QuizQuestions },
  },
  $type: null as unknown as UserAnswers,
  $input: null as unknown as UserAnswersInput
} as const;

// Table user_challenges
export interface UserChallenges {
  id: string;
  user_id: string;
  challenge_id: string;
  progress: number | null;
  completed: boolean | null;
  completion_date: Date | null;
}
export interface UserChallengesInput {
  id?: string;
  user_id: string;
  challenge_id: string;
  progress?: number | null;
  completed?: boolean | null;
  completion_date?: Date | null;
}
const user_challenges = {
  tableName: 'user_challenges',
  columns: ['id', 'user_id', 'challenge_id', 'progress', 'completed', 'completion_date'],
  requiredForInsert: ['user_id', 'challenge_id'],
  primaryKey: 'id',
  foreignKeys: { challenge_id: { table: 'challenges', column: 'id', $type: null as unknown as Challenges }, },
  $type: null as unknown as UserChallenges,
  $input: null as unknown as UserChallengesInput
} as const;

// Table user_program_enrollments
export interface UserProgramEnrollments {
  id: number;
  user_id: string;
  program_id: number;
  created_at: Date | null;
}
export interface UserProgramEnrollmentsInput {
  id: number;
  user_id: string;
  program_id: number;
  created_at?: Date | null;
}
const user_program_enrollments = {
  tableName: 'user_program_enrollments',
  columns: ['id', 'user_id', 'program_id', 'created_at'],
  requiredForInsert: ['id', 'user_id', 'program_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    program_id: { table: 'concours_learningpaths', column: 'id', $type: null as unknown as ConcoursLearningpaths },
  },
  $type: null as unknown as UserProgramEnrollments,
  $input: null as unknown as UserProgramEnrollmentsInput
} as const;

// Table user_signup_status
export interface UserSignupStatus {
  id: string;
  user_id: string | null;
  is_email_verified: boolean | null;
  is_password_set: boolean | null;
  is_payment_done: boolean | null;
  /** the user email adress */
  email: string;
  opt_send: boolean | null;
  opt_send_time: Date | null;
  otp_confirm: boolean | null;
  classe: string | null;
  /** the student name */
  name: string | null;
  /** the student phone number */
  phone: number | null;
  transaction_id: string | null;
  data: Json | null;
}
export interface UserSignupStatusInput {
  id?: string;
  user_id?: string | null;
  is_email_verified?: boolean | null;
  is_password_set?: boolean | null;
  is_payment_done?: boolean | null;
  /** the user email adress */
  email: string;
  opt_send?: boolean | null;
  opt_send_time?: Date | null;
  otp_confirm?: boolean | null;
  classe?: string | null;
  /** the student name */
  name?: string | null;
  /** the student phone number */
  phone?: number | null;
  transaction_id?: string | null;
  data?: Json | null;
}
const user_signup_status = {
  tableName: 'user_signup_status',
  columns: ['id', 'user_id', 'is_email_verified', 'is_password_set', 'is_payment_done', 'email', 'opt_send', 'opt_send_time', 'otp_confirm', 'classe', 'name', 'phone', 'transaction_id', 'data'],
  requiredForInsert: ['email'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'users', column: 'id', $type: null as unknown /* users */ },
    classe: { table: 'groups', column: 'id', $type: null as unknown as Groups },
  },
  $type: null as unknown as UserSignupStatus,
  $input: null as unknown as UserSignupStatusInput
} as const;

// Table user_streaks
/** Stores user streak information with reference to accounts table */
export interface UserStreaks {
  id: string;
  user_id: string;
  current_streak: number | null;
  max_streak: number | null;
  last_updated: Date | null;
  next_deadline: Date | null;
  created_at: Date | null;
}
/** Stores user streak information with reference to accounts table */
export interface UserStreaksInput {
  id?: string;
  user_id: string;
  current_streak?: number | null;
  max_streak?: number | null;
  last_updated?: Date | null;
  next_deadline?: Date | null;
  created_at?: Date | null;
}
const user_streaks = {
  tableName: 'user_streaks',
  columns: ['id', 'user_id', 'current_streak', 'max_streak', 'last_updated', 'next_deadline', 'created_at'],
  requiredForInsert: ['user_id'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as UserStreaks,
  $input: null as unknown as UserStreaksInput
} as const;

// Table user_xp
export interface UserXp {
  userid: string;
  total_xp: number;
}
export interface UserXpInput {
  userid: string;
  total_xp?: number;
}
const user_xp = {
  tableName: 'user_xp',
  columns: ['userid', 'total_xp'],
  requiredForInsert: ['userid'],
  primaryKey: 'userid',
  foreignKeys: { userid: { table: 'accounts', column: 'id', $type: null as unknown as Accounts }, },
  $type: null as unknown as UserXp,
  $input: null as unknown as UserXpInput
} as const;

// Table usercourseprogress
export interface Usercourseprogress {
  id: number;
  userid: string;
  courseid: number;
  sectionid: number | null;
  enrollmentdate: Date;
  lastaccessed: Date | null;
  progress: number | null;
}
export interface UsercourseprogressInput {
  id: number;
  userid: string;
  courseid: number;
  sectionid?: number | null;
  enrollmentdate?: Date;
  lastaccessed?: Date | null;
  progress?: number | null;
}
const usercourseprogress = {
  tableName: 'usercourseprogress',
  columns: ['id', 'userid', 'courseid', 'sectionid', 'enrollmentdate', 'lastaccessed', 'progress'],
  requiredForInsert: ['id', 'userid', 'courseid'],
  primaryKey: 'id',
  foreignKeys: {
    userid: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    courseid: { table: 'courses', column: 'id', $type: null as unknown as Courses },
    sectionid: { table: 'courses_content', column: 'id', $type: null as unknown as CoursesContent },
  },
  $type: null as unknown as Usercourseprogress,
  $input: null as unknown as UsercourseprogressInput
} as const;

// Table userquizprogress
export interface Userquizprogress {
  id: number;
  userid: string;
  enrollmentdate: Date;
  lastaccessed: Date | null;
  progress: number | null;
  quizid: string | null;
  questionid: number | null;
  selectedAns: string[] | null;
  score: number | null;
  correctIds: string[] | null;
  wrongIds: string[] | null;
  shouldBeCorrect: string | null;
  xp_gained: number | null;
}
export interface UserquizprogressInput {
  id: number;
  userid: string;
  enrollmentdate?: Date;
  lastaccessed?: Date | null;
  progress?: number | null;
  quizid?: string | null;
  questionid?: number | null;
  selectedAns?: string[] | null;
  score?: number | null;
  correctIds?: string[] | null;
  wrongIds?: string[] | null;
  shouldBeCorrect?: string | null;
  xp_gained?: number | null;
}
const userquizprogress = {
  tableName: 'userquizprogress',
  columns: ['id', 'userid', 'enrollmentdate', 'lastaccessed', 'progress', 'quizid', 'questionid', 'selectedAns', 'score', 'correctIds', 'wrongIds', 'shouldBeCorrect', 'xp_gained'],
  requiredForInsert: ['id', 'userid'],
  primaryKey: 'id',
  foreignKeys: {
    userid: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    quizid: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
    questionid: { table: 'quiz_questions', column: 'id', $type: null as unknown as QuizQuestions },
  },
  $type: null as unknown as Userquizprogress,
  $input: null as unknown as UserquizprogressInput
} as const;

// Table view
export interface View {
  id: number;
  created_at: Date;
  name: string | null;
}
export interface ViewInput {
  id: number;
  created_at?: Date;
  name?: string | null;
}
const view = {
  tableName: 'view',
  columns: ['id', 'created_at', 'name'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as View,
  $input: null as unknown as ViewInput
} as const;

// Table xp_history
export interface XpHistory {
  id: number;
  userid: string;
  xp_gained: number;
  source_type: string;
  created_at: Date | null;
  source_id: string | null;
  quiz_id: string | null;
}
export interface XpHistoryInput {
  id?: number;
  userid: string;
  xp_gained: number;
  source_type: string;
  created_at?: Date | null;
  source_id?: string | null;
  quiz_id?: string | null;
}
const xp_history = {
  tableName: 'xp_history',
  columns: ['id', 'userid', 'xp_gained', 'source_type', 'created_at', 'source_id', 'quiz_id'],
  requiredForInsert: ['userid', 'xp_gained', 'source_type'],
  primaryKey: 'id',
  foreignKeys: {
    userid: { table: 'accounts', column: 'id', $type: null as unknown as Accounts },
    quiz_id: { table: 'quiz', column: 'id', $type: null as unknown as Quiz },
  },
  $type: null as unknown as XpHistory,
  $input: null as unknown as XpHistoryInput
} as const;

// Table year_programs
export interface YearPrograms {
  id: string;
  class_id: string;
  subject: string;
  program: Json;
  created_at: Date | null;
  updated_at: Date | null;
}
export interface YearProgramsInput {
  id?: string;
  class_id: string;
  subject: string;
  program: Json;
  created_at?: Date | null;
  updated_at?: Date | null;
}
const year_programs = {
  tableName: 'year_programs',
  columns: ['id', 'class_id', 'subject', 'program', 'created_at', 'updated_at'],
  requiredForInsert: ['class_id', 'subject', 'program'],
  primaryKey: 'id',
  foreignKeys: { class_id: { table: 'groups', column: 'id', $type: null as unknown as Groups }, },
  $type: null as unknown as YearPrograms,
  $input: null as unknown as YearProgramsInput
} as const;


export interface TableTypes {
  accounts: {
    select: Accounts;
    input: AccountsInput;
  };
  audit_logs: {
    select: AuditLogs;
    input: AuditLogsInput;
  };
  cart_items: {
    select: CartItems;
    input: CartItemsInput;
  };
  carts: {
    select: Carts;
    input: CartsInput;
  };
  challenges: {
    select: Challenges;
    input: ChallengesInput;
  };
  chat_rooms: {
    select: ChatRooms;
    input: ChatRoomsInput;
  };
  class_difficulty_credits: {
    select: ClassDifficultyCredits;
    input: ClassDifficultyCreditsInput;
  };
  class_levels: {
    select: ClassLevels;
    input: ClassLevelsInput;
  };
  concours: {
    select: Concours;
    input: ConcoursInput;
  };
  concours_learningpaths: {
    select: ConcoursLearningpaths;
    input: ConcoursLearningpathsInput;
  };
  content_interactions: {
    select: ContentInteractions;
    input: ContentInteractionsInput;
  };
  course_learningpath: {
    select: CourseLearningpath;
    input: CourseLearningpathInput;
  };
  course_progress_summary: {
    select: CourseProgressSummary;
    input: CourseProgressSummaryInput;
  };
  course_tags: {
    select: CourseTags;
    input: CourseTagsInput;
  };
  course_videos: {
    select: CourseVideos;
    input: CourseVideosInput;
  };
  courses: {
    select: Courses;
    input: CoursesInput;
  };
  courses_categories: {
    select: CoursesCategories;
    input: CoursesCategoriesInput;
  };
  courses_content: {
    select: CoursesContent;
    input: CoursesContentInput;
  };
  courses_content_replica: {
    select: CoursesContentReplica;
    input: CoursesContentReplicaInput;
  };
  courses_replica: {
    select: CoursesReplica;
    input: CoursesReplicaInput;
  };
  daily_challenges: {
    select: DailyChallenges;
    input: DailyChallengesInput;
  };
  group_content: {
    select: GroupContent;
    input: GroupContentInput;
  };
  groups: {
    select: Groups;
    input: GroupsInput;
  };
  learning_paths: {
    select: LearningPaths;
    input: LearningPathsInput;
  };
  learning_sessions: {
    select: LearningSessions;
    input: LearningSessionsInput;
  };
  messages: {
    select: Messages;
    input: MessagesInput;
  };
  participants: {
    select: Participants;
    input: ParticipantsInput;
  };
  payment_status: {
    select: PaymentStatus;
    input: PaymentStatusInput;
  };
  payments: {
    select: Payments;
    input: PaymentsInput;
  };
  permissions: {
    select: Permissions;
    input: PermissionsInput;
  };
  quiz: {
    select: Quiz;
    input: QuizInput;
  };
  quiz_attempts: {
    select: QuizAttempts;
    input: QuizAttemptsInput;
  };
  quiz_courses: {
    select: QuizCourses;
    input: QuizCoursesInput;
  };
  quiz_learningpath: {
    select: QuizLearningpath;
    input: QuizLearningpathInput;
  };
  quiz_pin: {
    select: QuizPin;
    input: QuizPinInput;
  };
  quiz_question_template: {
    select: QuizQuestionTemplate;
    input: QuizQuestionTemplateInput;
  };
  quiz_questions: {
    select: QuizQuestions;
    input: QuizQuestionsInput;
  };
  quiz_tags: {
    select: QuizTags;
    input: QuizTagsInput;
  };
  resource_permissions: {
    select: ResourcePermissions;
    input: ResourcePermissionsInput;
  };
  ressources: {
    select: Ressources;
    input: RessourcesInput;
  };
  rewards: {
    select: Rewards;
    input: RewardsInput;
  };
  roles: {
    select: Roles;
    input: RolesInput;
  };
  schools: {
    select: Schools;
    input: SchoolsInput;
  };
  staff_invitations: {
    select: StaffInvitations;
    input: StaffInvitationsInput;
  };
  started_exams: {
    select: StartedExams;
    input: StartedExamsInput;
  };
  started_exams_questions: {
    select: StartedExamsQuestions;
    input: StartedExamsQuestionsInput;
  };
  streak_logs: {
    select: StreakLogs;
    input: StreakLogsInput;
  };
  tags: {
    select: Tags;
    input: TagsInput;
  };
  tags_content: {
    select: TagsContent;
    input: TagsContentInput;
  };
  transactions: {
    select: Transactions;
    input: TransactionsInput;
  };
  user_activity: {
    select: UserActivity;
    input: UserActivityInput;
  };
  user_answers: {
    select: UserAnswers;
    input: UserAnswersInput;
  };
  user_challenges: {
    select: UserChallenges;
    input: UserChallengesInput;
  };
  user_program_enrollments: {
    select: UserProgramEnrollments;
    input: UserProgramEnrollmentsInput;
  };
  user_signup_status: {
    select: UserSignupStatus;
    input: UserSignupStatusInput;
  };
  user_streaks: {
    select: UserStreaks;
    input: UserStreaksInput;
  };
  user_xp: {
    select: UserXp;
    input: UserXpInput;
  };
  usercourseprogress: {
    select: Usercourseprogress;
    input: UsercourseprogressInput;
  };
  userquizprogress: {
    select: Userquizprogress;
    input: UserquizprogressInput;
  };
  view: {
    select: View;
    input: ViewInput;
  };
  xp_history: {
    select: XpHistory;
    input: XpHistoryInput;
  };
  year_programs: {
    select: YearPrograms;
    input: YearProgramsInput;
  };
}

export const tables = {
  accounts,
  audit_logs,
  cart_items,
  carts,
  challenges,
  chat_rooms,
  class_difficulty_credits,
  class_levels,
  concours,
  concours_learningpaths,
  content_interactions,
  course_learningpath,
  course_progress_summary,
  course_tags,
  course_videos,
  courses,
  courses_categories,
  courses_content,
  courses_content_replica,
  courses_replica,
  daily_challenges,
  group_content,
  groups,
  learning_paths,
  learning_sessions,
  messages,
  participants,
  payment_status,
  payments,
  permissions,
  quiz,
  quiz_attempts,
  quiz_courses,
  quiz_learningpath,
  quiz_pin,
  quiz_question_template,
  quiz_questions,
  quiz_tags,
  resource_permissions,
  ressources,
  rewards,
  roles,
  schools,
  staff_invitations,
  started_exams,
  started_exams_questions,
  streak_logs,
  tags,
  tags_content,
  transactions,
  user_activity,
  user_answers,
  user_challenges,
  user_program_enrollments,
  user_signup_status,
  user_streaks,
  user_xp,
  usercourseprogress,
  userquizprogress,
  view,
  xp_history,
  year_programs,
}
